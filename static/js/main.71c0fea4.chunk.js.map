{"version":3,"sources":["components/Titles.jsx","components/Form.jsx","components/Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Component","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","this","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71c0fea4.chunk.js","sourcesContent":["import React,{Component} from 'react'\n\nclass Titles extends Component{\n    render(){\n        return(\n            <div>\n                <h1 className=\"title-container__title \">Weather finder</h1>\n                <h3 className=\"title-container__subtitle \">Find out temperature conditions and more...</h3>\n            </div>\n        )\n    }\n}\nexport default Titles;","import React,{Component} from 'react'\n\nconst Form=(props)=>{\n        return(\n            <form onSubmit={props.getWeather}>\n                <input type=\"text\" name=\"city\" placeholder=\"City\"></input>\n                <input type=\"text\" name=\"country\" placeholder=\"Country\"></input>\n                <button>Get Weather</button>\n            </form>\n        )\n    \n}\nexport default Form;","import React from \"react\";\n\nconst Weather = props => (\n\t<div className=\"weather__info\">\n\t {\t\n\t \tprops.city && props.country && <p className=\"weather__key\"> Location: \n\t \t\t<span className=\"weather__value\"> { props.city }, { props.country }</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tprops.temperature && <p className=\"weather__key\"> Temperature: \n\t \t\t<span className=\"weather__value\"> { props.temperature }\t</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tprops.humidity && <p className=\"weather__key\"> Humidity: \n\t \t\t<span className=\"weather__value\"> { props.humidity } </span>\n\t \t</p> \n\t }\n\t { \t\n\t \tprops.description && <p className=\"weather__key\"> Conditions: \n\t \t\t<span className=\"weather__value\"> { props.description } </span>\n\t </p> \n\t }\n\t { \n\t \tprops.error && <p className=\"weather__error\">{ props.error }</p>  \n\t }\n\t</div>\n);\n\nexport default Weather;","import React,{Component} from 'react';\nimport Titles from './components/Titles.jsx'\nimport Form from './components/Form.jsx'\nimport Weather from './components/Weather.jsx'\n\n\nconst API_KEY= \"cc963fc87bc13bdcfbbb90665803c6b4\"\n\nclass App extends Component{\n\n  state={\n    temperature:undefined,\n    city:undefined,\n    country:undefined,\n    humidity:undefined,\n    description:undefined,\n    error:undefined\n  }\n  getWeather= async(e)=>{\n    e.preventDefault()\n    const city=e.target.elements.city.value\n    const country=e.target.elements.country.value\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data=await api_call.json()\n    if(city && country )\n    {\n  \n    this.setState({\n      temperature:data.main.temp,\n      city:data.name,\n      country:data.sys.country,\n      humidity:data.main.humidity,\n      description:data.weather[0].description,\n      error:undefined})\n    \n    }else{\n      this.setState({\n        temperature:undefined,\n        city:undefined,\n        country:undefined,\n        humidity:undefined,\n        description:undefined,\n        error:\"Please enter the values\"})\n      \n      \n    }\n  } \n\n  render(){\n\n    return(\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main \">\n            <div className=\"container \">\n              <div className=\"row \">\n                  <div className=\"col-xs-5 title-container \">\n                      <Titles />\n                  </div>\n                  <div className=\"col-xs-6 form-container\">\n                      <Form getWeather={this.getWeather} />\n                      <Weather \n                        temperature={this.state.temperature} \n                        humidity={this.state.humidity}\n                        city={this.state.city}\n                        country={this.state.country}\n                        description={this.state.description}\n                        error={this.state.error}\n                      />\n                </div>\n              </div>\n           </div>\n        </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}